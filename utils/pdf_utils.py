# Django Imports
from django.http import HttpResponse
from django.http import HttpResponseServerError

# HTK Imports
from htk.utils.templates import generate_html_from_template
from htk.utils.templates import rewrite_relative_urls_as_absolute
from htk.view_helpers import render_custom


# isort: off


WKHTMLTOPDF_OPTIONS = {
    'page-size' : 'Letter',
    'orientation' : 'Portrait',
    'margin-top' : '0.75in',
    'margin-bottom' : '0.75in',
    'margin-left' : '0.50in',
    'margin-right' : '0.50in',
    'encoding' : 'UTF-8',
    #'print_media_type' : False,
}


def render_to_pdf_response(template_name, context_dict, show_content_in_browser=False, css_files=None):
    """Renders a Django `template_name` with context `context_dict` to a PDF file

    `context_dict` is expected to be generated by htk.view_helpers.wrap_data

    In trying to implement this functionality, much research and failed attempts went into this. 3 possible solutions emerged, among which only 1 seemed to be most consistently viable.
    1. The best solution as of 2016.01.01 is django-wkhtmltopdf
    2. pdfkit is not bad, but there were rendering issues and lots more code to write
    3. pisa is just old
    """
    context_dict['pdf_mode'] = True
    response = render_to_pdf_response_wkhtmltopdf(template_name, context_dict, show_content_in_browser=show_content_in_browser)
    #response = render_to_pdf_response_pdfkit(template_name, context_dict, css_files=css_files)
    return response

def render_url_to_pdf_response(url):
    from htk.lib.slack.utils import webhook_call
    webhook_call(text=url)
    import pdfkit
    pdf = pdfkit.from_url(url, False, options=WKHTMLTOPDF_OPTIONS)
    if pdf:
        response = HttpResponse(pdf, content_type='application/pdf')
    else:
        response = HttpResponseServerError('Error generating PDF file')
    return response


def render_to_pdf_response_wkhtmltopdf(template_name, context_dict, show_content_in_browser=False):
    """Wrapper for generating PDF files from `template_name` using  wkhtmltopdf

    PyPI: https://pypi.python.org/pypi/django-wkhtmltopdf
    Docs: http://django-wkhtmltopdf.readthedocs.org/en/latest/settings.html
    """
    from wkhtmltopdf.views import PDFTemplateResponse
    from wkhtmltopdf.views import PDFTemplateView
    request = context_dict['request']['request']
    class InnerPDFView(PDFTemplateView):
        context = context_dict
        cmd_options = WKHTMLTOPDF_OPTIONS
        def get(self, request):
            response = PDFTemplateResponse(
                request=request,
                template=self.template_name,
                filename=self.filename,
                context= self.context,
                show_content_in_browser=show_content_in_browser,
                cmd_options=self.cmd_options
            )
            return response
    response = InnerPDFView.as_view(
        template_name=template_name,
        filename=context_dict['pdf_filename']
    )(request)
    return response

def render_to_pdf_response_pdfkit(template_name, context_dict, css_files=None):
    """Render to a PDF response using pdfkit

    `context_dict` is expected to be generated by htk.view_helpers.wrap_data

    PyPI: https://pypi.python.org/pypi/pdfkit
    Installation: https://github.com/JazzCore/python-pdfkit/wiki/Using-wkhtmltopdf-without-X-server

    Outstanding Issues:
    -
    """
    import pdfkit
    html = generate_html_from_template(template_name, context_dict)
    base_url = context_dict['request']['base_uri']
    #html = rewrite_relative_urls_as_absolute(html, base_url)
    options = {
        'page-size' : 'Letter',
        'orientation' : 'Portrait',
        'margin-top' : '0.75in',
        'margin-bottom' : '0.75in',
        'margin-left' : '0.50in',
        'margin-right' : '0.50in',
        'encoding' : 'UTF-8',
        #'print_media_type' : False,
        #'title' : context_dict.get('title', 'PDF'),
    }
    pdf = pdfkit.from_string(html.encode('utf-8'), False, options=options, css=css_files)
    if pdf:
        response = HttpResponse(pdf, content_type='application/pdf')
    else:
        response = HttpResponseServerError('Error generating PDF file')
    return response


def render_to_pdf_response_pisa(template_name, context_dict):
    """Render to a PDF response using Pisa

    Caveat: xhtml2pdf / pisa seems to not be well-maintained and does not handle CSS3
    https://github.com/xhtml2pdf/xhtml2pdf/issues/44

    PyPI: https://pypi.python.org/pypi/pisa/
    """
    from six.moves import cStringIO as StringIO
    from xhtml2pdf import pisa
    html = generate_html_from_template(template_name, context_dict)
    result = StringIO()
    pdf = pisa.pisaDocument(StringIO(html.encode('utf-8')), result)
    if pdf:
        response = HttpResponse(result.getvalue(), mimetype='application/pdf')
    else:
        response = HttpResponseServerError('Error generating PDF file')
    return response
